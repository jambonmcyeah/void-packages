# Template file for 'arm-none-eabi-newlib'
_gcc_version=7.2.0
_newlib_version=2.4.0.20161025

_triplet=arm-none-eabi
_sysroot="/usr/${_triplet}"

pkgname=${_triplet}-newlib
version=2.4.0
revision=1
short_desc="GNU Cross bare metal toolchain"
maintainer="Thomas Bernard <thomas@famillebernardgouriou.fr>"
homepage="http://www.voidlinux.eu"
license="GPL-3, GPL-2, LGPL-2.1"
distfiles="
 ${GNU_SITE}/gcc/gcc-${_gcc_version}/gcc-${_gcc_version}.tar.gz
 ftp://sources.redhat.com/pub/newlib/newlib-${_newlib_version}.tar.gz
"

checksum="
 0153a003d3b433459336a91610cca2995ee0fb3d71131bd72555f2231a6efcfc
 cbecbc637496fcec02829c12babf8441c6500eb1933c776d2fa4e0a9a35f081f
"

lib32disabled=yes
nostrip=yes
nodebug=yes
create_wrksrc=yes
nocross=yes

hostmakedepends="perl flex bison arm-none-eabi-binutils"
makedepends="zlib-devel gmp-devel mpfr-devel libmpc-devel isl15-devel"

_apply_patch() {
	local args="$1" pname="$(basename $2)"

	if [ ! -f ".${pname}_done" ]; then
		patch -N $args -i $2
		touch .${pname}_done
	fi
}

_gcc_bootstrap() {
	local _args

	[ -f ${wrksrc}/.gcc_bootstrap_done ] && return 0

	cd ${wrksrc}/gcc-${_gcc_version}
	_apply_patch -p0 ${FILESDIR}/fix-cxxflags-passing.patch
	_apply_patch -p1 ${FILESDIR}/enable-with-multilib-list-for-arm.patch

	msg_normal "Building cross gcc bootstrap\n"

	[ ! -d ../gcc-bootstrap ] && mkdir ../gcc-bootstrap
	cd ../gcc-bootstrap

	_args="--prefix=/usr"
	_args+=" --host=${XBPS_CROSS_TRIPLET}"
	_args+=" --target=${_triplet}"
	_args+=" --quiet"
	_args+=" --without-headers"
	_args+=" --enable-internetwork"
	_args+=" --enable-multilib"
	_args+=" --enable-languages=c"
	_args+=" --with-newlib"
	_args+=" --disable-nls"
	_args+=" --disable-shared"
	_args+=" --disable-libquadmath"
	_args+=" --disable-decimal-float"
	_args+=" --disable-libgomp"
	_args+=" --disable-libmpx"
	_args+=" --disable-libmudflap"
	_args+=" --disable-libssp"
	_args+=" --disable-libitm"
	_args+=" --disable-libatomic"
	_args+=" --disable-threads"
	_args+=" --disable-sjlj-exceptions"
	_args+=" --with-gnu-ld"
	_args+=" --with-gnu-as"

	CFLAGS="-O0 -g0" CXXFLAGS="-O0 -g0" \
		../gcc-${_gcc_version}/configure ${_args}

	make ${makejobs} all-gcc
	make install-gcc

	touch ${wrksrc}/.gcc_bootstrap_done
}

_newlib_build() {
	local _args

	[ -f ${wrksrc}/.newlib_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross newlib\n"

	[ ! -d newlib-build ] && mkdir newlib-build
	cd newlib-build

	export CFLAGS="-O2 -ffunction-sections -fdata-sections"

	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --with-sysroot=${_sysroot}"
	_args+=" --enable-interwork"
	_args+=" --quiet"
	_args+=" --with-gnu-as"
	_args+=" --with-gnu-ld"
	_args+=" --disable-nls"
	_args+=" --disable-newlib-supplied-syscalls"
	_args+=" --enable-newlib-io-long-long"
	_args+=" --enable-newlib-register-fini"

	../newlib-${_newlib_version}/configure ${_args}

	make ${makejobs}
	
	touch ${wrksrc}/.newlib_build_done
}

_newlib_nano_build() {
	local _args

	[ -f ${wrksrc}/.newlib_nano_build_done ] && return 0

	cd ${wrksrc}
	msg_normal "Building cross newlib nano\n"

	[ ! -d newlib-nano-build ] && mkdir newlib-nano-build
	cd newlib-nano-build

	export CFLAGS_FOR_TARGET="-Os -ffunction-sections -fdata-sections"

	_args="--prefix=/usr"
	_args+=" --target=${_triplet}"
	_args+=" --with-sysroot=${_sysroot}"
	_args+=" --quiet"
	_args+=" --enable-interwork"
	_args+=" --with-gnu-as"
	_args+=" --with-gnu-ld"
	_args+=" --disable-nls"
	_args+=" --disable-newlib-supplied-syscalls"
	_args+=" --disable-newlib-fvwrite-in-streamio"
	_args+=" --disable-newlib-fseek-optimization"
	_args+=" --disable-newlib-wide-orient"
	_args+=" --enable-newlib-nano-malloc"
	_args+=" --disable-newlib-unbuf-stream-opt"
	_args+=" --enable-lite-exit"
	_args+=" --enable-newlib-global-atexit"
	_args+=" --enable-newlib-nano-formatted-io"
	_args+=" --enable-newlib-reent-small"

	../newlib-${_newlib_version}/configure ${_args}

	make ${makejobs}

	touch ${wrksrc}/.newlib_nano_build_done
}


do_build() {
	for f in include lib bin; do
		if [ ! -d ${_sysroot}/usr/${f} ]; then
			mkdir -p ${_sysroot}/usr/${f}
		fi
		if [ ! -h ${_sysroot}/${f} ]; then
			ln -sfr ${_sysroot}/usr/${f} ${_sysroot}/${f}
		fi
	done
	# Ensure we use sane environment
	export CFLAGS="-Os" CXXFLAGS="-Os"

	_gcc_bootstrap
	_newlib_nano_build
	_newlib_build
}

do_install() {

	# install newlib for target
	cd ${wrksrc}/newlib-nano-build
	make DESTDIR=${DESTDIR} install
	find "$DESTDIR" -regex ".*/lib\(c\|g\|rdimon\)\.a" -exec rename .a _nano.a '{}' \;

	cd ${wrksrc}/newlib-build
	make DESTDIR=${DESTDIR} install

	# strip target binaries
	find ${DESTDIR}/${_sysroot}/lib \( -name "*.a" -or -name "*.o" \) -exec ${_triplet}-strip '{}' \;
}
